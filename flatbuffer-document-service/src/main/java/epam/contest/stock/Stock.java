// automatically generated by the FlatBuffers compiler, do not modify

package epam.contest.stock;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Stock extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Stock getRootAsStock(ByteBuffer _bb) { return getRootAsStock(_bb, new Stock()); }
  public static Stock getRootAsStock(ByteBuffer _bb, Stock obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Stock __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String price() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priceAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer priceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public short amount() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String description() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public boolean status() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createStock(FlatBufferBuilder builder,
      int nameOffset,
      int priceOffset,
      short amount,
      int descriptionOffset,
      boolean status) {
    builder.startTable(5);
    Stock.addDescription(builder, descriptionOffset);
    Stock.addPrice(builder, priceOffset);
    Stock.addName(builder, nameOffset);
    Stock.addAmount(builder, amount);
    Stock.addStatus(builder, status);
    return Stock.endStock(builder);
  }

  public static void startStock(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addPrice(FlatBufferBuilder builder, int priceOffset) { builder.addOffset(1, priceOffset, 0); }
  public static void addAmount(FlatBufferBuilder builder, short amount) { builder.addShort(2, amount, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(3, descriptionOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, boolean status) { builder.addBoolean(4, status, false); }
  public static int endStock(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishStockBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedStockBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Stock get(int j) { return get(new Stock(), j); }
    public Stock get(Stock obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

